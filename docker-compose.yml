services:
  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    container_name: voxify_frontend
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:10000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped
    command: npm start

  api:
    build:
      context: ./backend/
      dockerfile: api/Dockerfile
    container_name: voxify_api
    depends_on:
      db-init:
        condition: service_completed_successfully
    ports:
      - "10000:10000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=sqlite:////data/voxify.db
      - VECTOR_DB_PATH=data/chroma_db
    volumes:
      - data_volume:/data
    restart: unless-stopped
    healthcheck:  # Add health check for the API
      test: ["CMD", "curl", "-f", "http://localhost:10000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db-init:
    build:
      context: ./backend/
      dockerfile: Dockerfile.base
    container_name: voxify_db_init
    volumes:
      - data_volume:/data
    environment:
      - DATABASE_URL=sqlite:////data/voxify.db
      - VECTOR_DB_PATH=data/chroma_db
    entrypoint: ["python", "scripts/init_db.py"]
    restart: "no"

  tests:
    build:
      context: .
      dockerfile: backend/tests/Dockerfile
    container_name: voxify_tests
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - data_volume:/data
    environment:
      - DATABASE_URL=sqlite:////data/voxify.db
      - VECTOR_DB_PATH=data/chroma_db
      - DOCKER_ENV=true
      - FLASK_HOST=voxify_api
    command: ["sh", "-c", "python -m pytest tests/ -v && python -m unittest discover -s tests -p 'test_*.py' -v"]
    restart: "no"

  lint-backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile.base
    container_name: voxify_lint_backend
    volumes:
      - ./backend:/app
      - ./backend/scripts/lint.sh:/lint.sh
    working_dir: /app
    command: ["bash", "/lint.sh"]
    restart: "no"

  lint-frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    container_name: voxify_lint_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./frontend/scripts/lint.sh:/lint.sh
    working_dir: /app
    command: ["sh", "/lint.sh"]
    restart: "no"

volumes:
  data_volume: